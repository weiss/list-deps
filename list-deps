#!/usr/bin/env escript
%
% Copyright (c) 2016 Holger Weiss <holger@zedat.fu-berlin.de>.
%
% Permission to use, copy, modify, and/or distribute this software for any
% purpose with or without fee is hereby granted, provided that the above
% copyright notice and this permission notice appear in all copies.
%
% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
% REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
% AND FITNESS.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
% INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
% LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
% OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
% PERFORMANCE OF THIS SOFTWARE.

usage(IoDevice, ExitStatus) ->
    ok = io:put_chars(IoDevice, "Usage: list-deps <module> ..."),
    ok = io:nl(IoDevice),
    halt(ExitStatus).

analyze(File) ->
    {ok, Module} = xref:add_module(x, File),
    {ok, Calls} = xref:analyze(x, {module_call, Module}),
    {ok, Undef} = xref:analyze(x, undefined_functions),
    ok = xref:remove_module(x, Module),
    UndefSet = lists:foldl(fun({M, _, _}, Set) ->
                                   sets:add_element(M, Set)
                           end, sets:new(), Undef),
    UndefList = sets:to_list(UndefSet),
    CallsList = Calls -- UndefList,
    ok = io:fwrite("~s:~n", [File]),
    if length(CallsList) =:= 0 -> ok;
       true ->
            ok = io:put_chars("  Dependencies:"),
            ok = io:nl(),
            lists:foreach(fun(C) ->
                                  ok = io:fwrite("    ~s~n", [C])
                          end, CallsList)
    end,
    if length(UndefList) =:= 0 -> 0;
       true ->
            ok = io:put_chars("  Missing module(s):"),
            ok = io:nl(),
            lists:foreach(fun(U) ->
                                  ok = io:fwrite("    ~s~n", [U])
                          end, UndefList),
            1
    end.

main(["-h"]) ->
    usage(standard_io, 0);
main([]) ->
    usage(standard_error, 2);
main(Files) ->
    {ok, _Pid} = xref:start(x, {xref_mode, modules}),
    ok = xref:set_library_path(x, code_path),
    Status = lists:foldl(fun(File, Acc) ->
                                 max(analyze(File), Acc)
                         end, 0, Files),
    stopped = xref:stop(x),
    halt(Status).
